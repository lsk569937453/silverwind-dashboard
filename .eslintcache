[{"/home/sliu/code/github/silverwind-dashboard/src/index.js":"1","/home/sliu/code/github/silverwind-dashboard/src/App.js":"2","/home/sliu/code/github/silverwind-dashboard/src/reportWebVitals.js":"3","/home/sliu/code/github/silverwind-dashboard/src/component/routerMap.js":"4","/home/sliu/code/github/silverwind-dashboard/src/utils/commonUtils.js":"5","/home/sliu/code/github/silverwind-dashboard/src/utils/axiosUtils.js":"6","/home/sliu/code/github/silverwind-dashboard/src/component/dashboardPage.jsx":"7","/home/sliu/code/github/silverwind-dashboard/src/component/configPage.jsx":"8","/home/sliu/code/github/silverwind-dashboard/src/component/ratelimit.jsx":"9","/home/sliu/code/github/silverwind-dashboard/src/component/allowDenyList.jsx":"10","/home/sliu/code/github/silverwind-dashboard/src/component/authentication.jsx":"11","/home/sliu/code/github/silverwind-dashboard/src/component/baseConfig.jsx":"12","/home/sliu/code/github/silverwind-dashboard/src/component/listenerListPage.jsx":"13","/home/sliu/code/github/silverwind-dashboard/src/component/startupPage.jsx":"14","/home/sliu/code/github/silverwind-dashboard/src/component/healthCheck.jsx":"15","/home/sliu/code/github/silverwind-dashboard/src/component/anomalyDetection.jsx":"16"},{"size":457,"mtime":1680143920991,"results":"17","hashOfConfig":"18"},{"size":2685,"mtime":1681304276318,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1680143920991,"results":"20","hashOfConfig":"18"},{"size":574,"mtime":1680360086153,"results":"21","hashOfConfig":"18"},{"size":1307,"mtime":1680183026398,"results":"22","hashOfConfig":"18"},{"size":3087,"mtime":1681304276322,"results":"23","hashOfConfig":"18"},{"size":4259,"mtime":1681304276322,"results":"24","hashOfConfig":"18"},{"size":23878,"mtime":1681724644670,"results":"25","hashOfConfig":"18"},{"size":8111,"mtime":1680185171419,"results":"26","hashOfConfig":"18"},{"size":4855,"mtime":1681304276318,"results":"27","hashOfConfig":"18"},{"size":4065,"mtime":1680185031983,"results":"28","hashOfConfig":"18"},{"size":17837,"mtime":1681715961607,"results":"29","hashOfConfig":"18"},{"size":5752,"mtime":1681304276322,"results":"30","hashOfConfig":"18"},{"size":3229,"mtime":1681304276322,"results":"31","hashOfConfig":"18"},{"size":5286,"mtime":1681304276322,"results":"32","hashOfConfig":"18"},{"size":4379,"mtime":1681304276318,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"tz7e8q",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/home/sliu/code/github/silverwind-dashboard/src/index.js",[],["73","74"],"/home/sliu/code/github/silverwind-dashboard/src/App.js",["75","76"],"import  React,  { useState }from 'react';\nimport useLocalStorage from \"use-local-storage\";\nimport StartupPage from \"./component/startupPage\"\nimport './App.css';\nimport router from './component/routerMap'\nimport CommonUtils from \"./utils/commonUtils\";\nimport {  Row, Col } from 'antd';\nimport {\n  HashRouter  as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\";\n\nimport styled from 'styled-components'\n\nconst MainDiv = styled.div`\nheight:95%;\n`;\nconst MenuDiv = styled.div`\nbackground:rgba(0,0,0,0.8);\n/* color: #fff; */\npadding-top:15px;\npadding-bottom:15px;\nh4{ \n  font-family:'Microsoft YaHei';\n  color:#f5f5f7;\n}\n`;\nconst ColCss = styled(Col)`\ntext-align:left;\n`\nfunction App(props) {\n\n  const [hasLogin, setHasLogin] = useState(true)\n  const [host, setHost] = useLocalStorage(\"host\",undefined);\n\n  // let { history } = props;\n  // history.push('/listenerlist');\n\n  const getKey=()=>{\n    return CommonUtils.guid();\n  }\n  const handleResetButtonOnClick=()=>{\n    localStorage.clear();\n    window.location.reload();\n  }\n  const dashboardPage=()=>{\n    return  ( \n      <Router>\n        <MainDiv>\n          <MenuDiv align=\"middle\" type=\"flex\" justify=\"center\">\n            <Row>\n              \n              <ColCss span={2} offset={4}>\n                <Link to=\"/\">\n                  <h4>SilverWind-Dashboard</h4>\n                </Link>\n              </ColCss>\n              <ColCss span={2} offset={1} >\n                <Link to=\"/listenerlist\">\n                  <h4>Listener List</h4>\n                </Link>\n              </ColCss>\n              <ColCss span={2} offset={12}>\n                <Link  onClick={handleResetButtonOnClick}>\n                  <h4>Reset Dashboard</h4>\n                </Link>\n              </ColCss>\n              {/* <ColCss span={2} >\n                <Link to=\"/\">\n                  <h4>TCP</h4>\n                </Link>\n              </ColCss> */}\n\n            \n            </Row>\n          </MenuDiv>\n          <Switch>\n            {\n              router.map((item, key) => {\n                return (\n                  <Route key={key} path={item.path} exact render={\n                    props => (\n                      !item.auth ? (< item.component {...props} key={getKey}/>) :\n                        (hasLogin ? <item.component {...props}  key={getKey}/> : <div/>)\n                    )\n                  } />\n                )\n              })\n            }\n          </Switch>\n        </MainDiv>\n      </Router>\n    );\n  }\n  const mainPage=()=>{\n    if(host){\n      return dashboardPage();\n    }else{\n      return <StartupPage/>;\n    }\n    \n  }\n  return (<>\n    {\n      \n      mainPage()\n    }\n    </>\n  );\n}\n\nexport default App;\n","/home/sliu/code/github/silverwind-dashboard/src/reportWebVitals.js",[],"/home/sliu/code/github/silverwind-dashboard/src/component/routerMap.js",[],"/home/sliu/code/github/silverwind-dashboard/src/utils/commonUtils.js",["77","78"],"export default class CommonUtils {\n    /**\n     * 判断字符串是否为空\n     * @param str\n     * @returns {boolean}\n     */\n    static isNull(str) {\n        return str == null || str.length === 0 || str === '';\n    }\n    static guid() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0,\n                v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n \n    /**\n     *\n     * @desc  判断是否为身份证号\n     * @param  {String|Number} str\n     * @return {Boolean}\n     */\n    static isIdCard(str) {\n        return /^(^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$)|(^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d{4})|\\d{3}[Xx])$)$/.test(str)\n    }\n    static checkIsIPV4(entry) {\n        var blocks = entry.split(\".\");\n        if(blocks.length === 4) {\n          return blocks.every(function(block) {\n            return parseInt(block,10) >=0 && parseInt(block,10) <= 255;\n          });\n        }\n        return false;\n      }\n    /**\n     *\n     * @desc   判断是否为手机号\n     * @param  {String|Number} str\n     * @return {Boolean}\n     */\n    static isPhoneNum(str) {\n        return /^(0|86|17951)?(1[3-9][0-9])[0-9]{8}$/.test(str)\n    }\n}\n","/home/sliu/code/github/silverwind-dashboard/src/utils/axiosUtils.js",[],"/home/sliu/code/github/silverwind-dashboard/src/component/dashboardPage.jsx",["79","80"],"import React from 'react'\nimport { Row, Col } from 'antd';\n\nimport { withRouter } from 'react-router-dom'\n\nimport styled from 'styled-components'\nimport useLocalStorage from \"use-local-storage\";\n\nimport ReactECharts from 'echarts-for-react';\n\nconst LineDiv = styled.div`\ndisplay: inline-block;\nbackground:#fff;\npadding-left: 10px;\n    padding-right: 10px;\n    border-radius: 10px;\n`;\nconst FontDiv = styled.div`\nfont-size: 60px;\n    font-weight: bold;\n`\nconst APIFontDiv = styled.div`\nfont-size: 21px;\n    font-weight: bold;\n    padding-top: 10px;\n    text-align: center;\n    color: rgba(0,0,0,0.25);\n`\nconst EntrypointsDiv = styled.div`\nfont-size: 30px;\n    font-weight: bold;\n    padding-bottom: 10px;\n\n`;\nconst Maindiv = styled.div`\nbackground: #fff;\n`\n\nconst RowDiv = styled(Row)`\nbackground: rgb(245, 245, 247);\n`;\n\nfunction DashboardPage(props) {\n\n    const [host, setHost] = useLocalStorage(\"host\",undefined);\n   \n    const [port, setPort] = useLocalStorage(\"port\",undefined);\n    const getHttpOptions = () => {\n        return {\n            grid: { top: 40, right: 8, bottom: 40, left: 20,containLabel: true  },\n            xAxis: {\n                type: 'category',\n                name: 'Date',\n                nameLocation: 'middle',\n                 nameGap: 30,\n                data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n            },\n            yAxis: {\n                type: 'value',\n                name: 'Request Per Day',\n            },\n            series: [\n                {\n                    data: [820, 932, 901, 934, 1290, 1330, 1320],\n                    type: 'line',\n                    smooth: true,\n                },\n            ],\n            tooltip: {\n                trigger: 'axis',\n            },\n        };\n    };\n    const getTcpOptions = () => {\n        return {\n            grid: { top: 40, right: 8, bottom: 40, left: 20,containLabel: true   },\n            xAxis: {\n                type: 'category',\n                data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n                name: 'Date',\n                nameLocation: 'middle',\n                 nameGap: 30,\n            },\n            yAxis: {\n                type: 'value',\n                name: 'Request Per Day',\n            },\n            series: [\n                {\n                    data: [160, 250, 270, 320, 400, 450, 300],\n                    type: 'line',\n                    smooth: true,\n                },\n            ],\n            tooltip: {\n                trigger: 'axis',\n            },\n        };\n    };\n   \n    return (\n        <div style={{ paddingTop: \"20px\", background: \"#f5f5f7\", height: \"100%\" }}>\n\n            {/* <Spin spinning={pageStage}> */}\n            <RowDiv>\n                <Col xs={{ span: 16, offset: 4 }} >\n\n                    <RowDiv >\n\n                        <Col xs={{ span: 24 }} >\n                    \n                            <EntrypointsDiv>Entrypoints:</EntrypointsDiv>\n                            <Maindiv>\n                                <RowDiv gutter={4} justify=\"start\" style={{ paddingBottom: \"20px\" }} >\n                                    <Col span={4} >\n                                        <LineDiv>\n                                            <APIFontDiv>ADMIN API</APIFontDiv>\n                                            <FontDiv>http://{host}:{port}</FontDiv>\n                                        </LineDiv>\n                                    </Col>\n\n                                    <Col span={4} >\n                                    </Col>\n\n                                </RowDiv>\n                            </Maindiv>\n                        </Col>\n                        <Col xs={{ span: 24 }} >\n                            <EntrypointsDiv>HTTP</EntrypointsDiv>\n                            <ReactECharts option={getHttpOptions()} />\n                        </Col>\n                        <Col xs={{ span: 24 }} >\n                            <EntrypointsDiv>TCP</EntrypointsDiv>\n                            <ReactECharts option={getTcpOptions()} />\n                        </Col>\n                    </RowDiv>\n\n                </Col>\n\n\n            </RowDiv>\n            {/* </Spin> */}\n        </div>\n    );\n\n}\nexport default withRouter(DashboardPage);","/home/sliu/code/github/silverwind-dashboard/src/component/configPage.jsx",["81","82","83"],"import React, { useState, useEffect } from 'react'\nimport { Row, Col, Card, Button, message, Tabs, Spin } from 'antd';\nimport { useLocation } from 'react-router-dom'\n\nimport Request from '../utils/axiosUtils'\n\nimport { withRouter } from 'react-router-dom'\n\nimport CommonUtils from '../utils/commonUtils'\nimport styled from 'styled-components'\n\nimport BaseConfig from './baseConfig'\nimport AllowDenyList from './allowDenyList';\nimport Authentication from './authentication';\nimport Ratelimit from './ratelimit';\nimport HealthCheck from './healthCheck';\nimport AnomalyDetection from './anomalyDetection';\nconst RowDiv = styled(Row)`\nbackground: rgb(245, 245, 247);\n\n`;\nconst TabsDiv = styled(Tabs)`\n.ant-tabs-content-holder{\n    background:white;\n}\nheight : 80vh;\n`\n\n\nfunction ConfigPage(props) {\n    const [appConfig, setAppConfig] = useState({});\n    const [baseConfigData, setBaseConfigData] = useState({})\n    const [allowDenyData, setAllowDenyData] = useState({})\n    const [authenticationData, setAuthenticationData] = useState({})\n    const [ratelimitData, setRatelimitData] = useState({})\n    const [healthCheckData, setHealthCheckData] = useState({});\n    const [anomalyDetectionData, setAnomalyDetectionData] = useState({});\n    const [livenessConfigData, setLivenessConfigData] = useState({})\n    const [apiServiceId, setApiServiceId] = useState(undefined);\n    const [routeId, setRouteId] = useState(undefined);\n    const [loading, setLoading] = useState(false);\n    // const ratelimitForm=Form.useForm();\n    const location = useLocation();\n    const searchParam = new URLSearchParams(location.search);\n    useEffect(() => {\n        var currentApiServiceId = searchParam.get(\"apiServiceId\");\n        if (!currentApiServiceId) {\n            return;\n        }\n        var routeId = searchParam.get(\"routeId\");\n        if (!routeId) {\n            return;\n        }\n        setApiServiceId(currentApiServiceId);\n        setRouteId(routeId);\n        requestAppConfig(currentApiServiceId, routeId);\n    }, []);\n    const requestAppConfig = (currentApiServiceId, routeId) => {\n        Request.get(\"/appConfig\").then(res => {\n            if (res.data.response_code === 0) {\n                const apiServiceConfig = res.data.response_object.api_service_config.filter(item => item.api_service_id === currentApiServiceId)[0];\n                const apiConfigs = apiServiceConfig.service_config.routes.filter(item => item.route_id === routeId)[0];\n                setAppConfig(apiConfigs);\n                constructBaseConfigData(apiConfigs, apiServiceConfig.listen_port, apiServiceConfig.service_config.server_type);\n                constructAllowDenyData(apiConfigs);\n                constructAuthenticationData(apiConfigs);\n                constructRatelimitData(apiConfigs);\n                constructHealthCheckData(apiConfigs);\n                constructAnomalyDetectionData(apiConfigs);\n                console.log(apiConfigs);\n            }\n        });\n\n    }\n    const constructBaseConfigData = (appConfig, currentPort, server_type) => {\n        const tableData = appConfig?.route_cluster?.routes.map(item => ({\n            endpoint: item.base_route.endpoint,\n            key: CommonUtils.guid(),\n            weight: item.weight ? item.weight : 100,\n            headerkey: item.header_key ? item.header_key : \"user-agent\",\n            headerValueType: item.header_value_mapping_type?.type ? item.header_value_mapping_type?.type : \"Text\",\n            headerValueMatch: \"test\"\n        }));\n        const port = currentPort;\n        const prefix = appConfig?.matcher?.prefix;\n        const routeAlgorighm = appConfig?.route_cluster?.type;\n        setBaseConfigData({\n            tableData: tableData,\n            serverType: server_type,\n            port: port,\n            prefix: prefix,\n            routeAlgorighm: routeAlgorighm,\n            isCreate: currentPort,\n        });\n    }\n    const constructAllowDenyData = (appConfig) => {\n        let allowDenyList = appConfig?.allow_deny_list?.map((item) => {\n            let typeLabel = item.limit_type;\n            if (typeLabel === \"AllowAll\") {\n                typeLabel = \"ALLOW-ALL\";\n            } else if (typeLabel === \"DenyAll\") {\n                typeLabel = \"DENY-ALL\";\n            }\n            return {\n                \"type\": item.limit_type,\n                \"typeLabel\": typeLabel,\n                \"value\": item.value,\n                \"key\": CommonUtils.guid()\n            };\n        });\n        if (allowDenyList == null) {\n            allowDenyList = [];\n        }\n        setAllowDenyData({\n            allowDenyList: allowDenyList\n        });\n    }\n    const constructAuthenticationData = (appConfig) => {\n        let defaultType = \"None\";\n        let type = appConfig?.authentication?.type;\n        if (!type) {\n            type = defaultType;\n        }\n\n        setAuthenticationData({\n            authenticationType: type,\n            authenticationObj: appConfig?.authentication\n        });\n    }\n    const constructRatelimitData = (appConfig) => {\n        let defaultType = \"None\";\n        let defaultLimitLocationType = \"IP\";\n        let type = appConfig?.ratelimit?.type;\n        let limitLocationType = appConfig.ratelimit?.limit_location?.type;\n        if (type == null) {\n            type = defaultType;\n        }\n        if (limitLocationType == null) {\n            limitLocationType = defaultLimitLocationType;\n        }\n\n        setRatelimitData({\n            ratelimitType: type,\n            limitLocationType: limitLocationType,\n            bucketCapacity: appConfig.ratelimit?.capacity,\n            ratePerUnit: appConfig.ratelimit?.rate_per_unit,\n            ip: appConfig.ratelimit?.limit_location?.value,\n            headerKey: appConfig.ratelimit?.limit_location?.key,\n            headerValue: appConfig.ratelimit?.limit_location?.value,\n            unitType: appConfig.ratelimit?.unit?.type,\n            // form:ratelimitForm,\n        });\n    }\n    const constructHealthCheckData = (appConfig) => {\n        let defaultType = \"None\";\n        let type = appConfig?.health_check?.type;\n        if (type == null) {\n            type = defaultType;\n        }\n        setHealthCheckData({\n            healthCheckType: type,\n            interval: appConfig.health_check?.base_health_check_param?.interval,\n            timeout: appConfig.health_check?.base_health_check_param?.timeout,\n            path: appConfig.health_check?.path,\n            // form:ratelimitForm,\n        });\n        setLivenessConfigData({\n            minLivenessCount: appConfig.liveness_config?.min_liveness_count,\n        });\n    }\n    const constructAnomalyDetectionData = (appConfig) => {\n        let defaultType = \"None\";\n        let type = appConfig?.anomaly_detection?.type;\n        if (type == null) {\n            type = defaultType;\n        }\n        setAnomalyDetectionData({\n            anomalyDetectionType: type,\n            consecutive5xx: appConfig.anomaly_detection?.consecutive_5xx,\n            ejectionSecond: appConfig.anomaly_detection?.base_anomaly_detection_param?.ejection_second,\n            // form:ratelimitForm,\n        });\n        setLivenessConfigData({\n            minLivenessCount: appConfig.liveness_config?.min_liveness_count,\n        });\n    }\n    const getTabs = () => {\n        const baseConfigPage = {\n            label: `Base Config`,\n            key: 1,\n            children: <BaseConfig baseConfigData={baseConfigData} setBaseConfigData={setBaseConfigData} />,\n        };\n        const allowDenyListPage = {\n            label: `Allow Deny List`,\n            key: 2,\n            children: <AllowDenyList allowDenyData={allowDenyData} setAllowDenyData={setAllowDenyData} />,\n        };\n        const authenticationPage = {\n            label: `Authentication`,\n            key: 3,\n            children: <Authentication authenticationData={authenticationData} setAuthenticationData={setAuthenticationData} />,\n        };\n        const ratelimitPage = {\n            label: `Rate limit`,\n            key: 4,\n            children: <Ratelimit ratelimitData={ratelimitData} setRatelimitData={setRatelimitData} />,\n        };\n        const healthCheckPage = {\n            label: `Health Check`,\n            key: 5,\n            children: <HealthCheck healthCheckData={healthCheckData} setHealthCheckData={setHealthCheckData} livenessConfigData={livenessConfigData}\n                setLivenessConfigData={setLivenessConfigData} />,\n        };\n        const anomalyDetectionPage = {\n            label: `Anomaly Detection`,\n            key: 6,\n            children: <AnomalyDetection anomalyDetectionData={anomalyDetectionData} setAnomalyDetectionData={setAnomalyDetectionData} livenessConfigData={livenessConfigData}\n                setLivenessConfigData={setLivenessConfigData} />,\n        };\n        return [baseConfigPage, allowDenyListPage, authenticationPage, ratelimitPage, healthCheckPage, anomalyDetectionPage];\n\n    };\n    const handleSaveButtonOnClick = () => {\n        if (!checkBeforeRequest()) {\n            return false;\n        }\n        if (!apiServiceId) {\n            createApiServiceConfigOrAddRoute();\n        } else {\n            updateRouteByRouteId();\n        }\n\n    }\n    const checkBeforeRequest = () => {\n        if (!baseConfigData.serverType) {\n            message.error('Please select the server type!');\n            return false;\n        }\n        if (!baseConfigData.isCreate) {\n            if (baseConfigData.serverType === \"Https\" || baseConfigData.serverType === \"Http2Tls\") {\n                if (!baseConfigData.certificateSource) {\n                    message.error('Please select the certificateSource!');\n                }\n                if (baseConfigData.certificateSource === \"manual\") {\n                    if (!baseConfigData.certPerm) {\n                        message.error('Please fill the cert perm!');\n                        return false;\n                    }\n                    if (!baseConfigData.keyPerm) {\n                        message.error('Please fill the key perm!');\n                        return false;\n                    }\n                }\n                if (baseConfigData.certificateSource === \"letsencrypt\") {\n                    if (!baseConfigData.mailName) {\n                        message.error('Please fill the mail name!');\n                        return false;\n                    }\n                    if (!baseConfigData.domainName) {\n                        message.error('Please fill the domain name!');\n                        return false;\n                    }\n                }\n\n            }\n        }\n        if (!baseConfigData.port) {\n            message.error('Please fill the port!');\n            return false;\n        }\n        if (!baseConfigData.prefix) {\n            message.error('Please fill the prefix!');\n            return false;\n        }\n        if (!baseConfigData.routeAlgorighm) {\n            message.error('Please select the routeAlgorighm!');\n            return false;\n        }\n        if (!baseConfigData.tableData || baseConfigData.tableData.length === 0) {\n            message.error('Please fill the route!');\n            return false;\n        }\n        if (authenticationData.authenticationType && authenticationData.authenticationType !== \"None\") {\n            if (authenticationData.authenticationType === \"ApiKeyAuth\") {\n                if (!authenticationData.authenticationObj?.key || !authenticationData.authenticationObj?.value) {\n                    message.error('Please fill the key and value for Authentication!');\n                    return false;\n                }\n            } else if (authenticationData.authenticationType === \"BasicAuth\") {\n                if (!authenticationData.authenticationObj?.credentials) {\n                    message.error('Please fill the credentials for Authentication!');\n                    return false;\n                }\n            }\n        }\n        if (ratelimitData.ratelimitType && ratelimitData.ratelimitType !== \"None\") {\n            if (ratelimitData.ratelimitType === \"TokenBucketRateLimit\") {\n                if (!ratelimitData.bucketCapacity) {\n                    message.error('Please fill the bucket capacity for rate limit!');\n                    return false;\n                }\n            }\n            if (!ratelimitData.ratePerUnit) {\n                message.error('Please fill the rate per unit for rate limit!');\n                return false;\n            }\n            if (!ratelimitData.unitType) {\n                message.error('Please fill the ratelimit unit type for rate limit!');\n                return false;\n            }\n            if (!ratelimitData.limitLocationType) {\n                message.error('Please fill the limit location type for rate limit!');\n                return false;\n            }\n\n            if (ratelimitData.limitLocationType === \"IP\") {\n                if (!ratelimitData.ip) {\n                    message.error('Please fill the ip for rate limit!');\n                    return false;\n                }\n                if (!CommonUtils.checkIsIPV4(ratelimitData.ip)) {\n                    message.error('Please fill the legal ip for rate limit!');\n                    return false;\n                }\n            }\n            if (ratelimitData.limitLocationType === \"Header\") {\n                if (!ratelimitData.headerKey) {\n                    message.error('Please fill the headerKey for rate limit!');\n                    return false;\n                }\n                if (!ratelimitData.headerValue) {\n                    message.error('Please fill the headerValue for rate limit!');\n                    return false;\n                }\n            }\n\n        }\n        if (healthCheckData.healthCheckType && healthCheckData.healthCheckType !== \"None\") {\n            if (!healthCheckData.interval) {\n                message.error('Please fill the interval for the health check!');\n                return false;\n            }\n            if (!healthCheckData.timeout) {\n                message.error('Please fill the timeout for the health check!');\n                return false;\n            }\n            if (!healthCheckData.path) {\n                message.error('Please fill the path for the health check!');\n                return false;\n            }\n            if (!livenessConfigData.minLivenessCount) {\n                message.error('Please fill the min liveness count for the health check!');\n                return false;\n            }\n        }\n        if (anomalyDetectionData.anomalyDetectionType && anomalyDetectionData.anomalyDetectionType !== \"None\") {\n            if (!anomalyDetectionData.consecutive5xx) {\n                message.error('Please fill the count of consecutive 5xx for the health check!');\n                return false;\n            }\n            if (!anomalyDetectionData.ejectionSecond) {\n                message.error('Please fill the ejection second for the health check!');\n                return false;\n            }\n            if (!livenessConfigData.minLivenessCount) {\n                message.error('Please fill the min liveness count for the health check!');\n                return false;\n            }\n        }\n\n\n        return true;\n\n    }\n    const isTls = () => {\n        return baseConfigData.serverType === \"Https\" || baseConfigData.serverType === \"Http2Tls\";\n    }\n    const createApiServiceConfigOrAddRoute = async () => {\n\n        let cert_str = isTls() ? baseConfigData.certPerm : null;\n        let key_str = isTls() ? baseConfigData.keyPerm : null;\n        setLoading(true);\n        if (isTls() && baseConfigData.certificateSource === \"letsencrypt\") {\n            let requestData = {\n                \"mail_name\": baseConfigData.mailName,\n                \"domain_name\": baseConfigData.domainName,\n            };\n            const data = await Request.post(\"/letsEncryptCertificate\", requestData).then(res => {\n                if (res.data?.response_code === 0) {\n                    const { key_perm, certificate_perm } = res.data.response_object;\n                    return { keyPerm: key_perm, certPerm: certificate_perm };\n                }\n            }).catch(error => {\n\n                return undefined;\n            });\n\n            if (!data) {\n                setLoading(false);\n                message.error({\n                    content: 'Get the certificate of letsEncrypt error,please try agagin or fill the certificate  mannually!',\n                    duration: 2,\n                });\n                return;\n            }\n            const { keyPerm, certPerm } = data;\n            cert_str = certPerm;\n            key_str = keyPerm;\n        }\n        const newRoute = createRoute();\n        const newServiceConfig = {\n            \"listen_port\": baseConfigData.port,\n            \"service_config\": {\n                \"server_type\": baseConfigData.serverType,\n                \"cert_str\": cert_str,\n                \"key_str\": key_str,\n                \"routes\": [\n                    newRoute\n                ]\n            }\n        };\n        Request.post(\"/appConfig\", newServiceConfig).then(res => {\n            const delay = 2000;\n            const timeoutId = setTimeout(() => {\n                setLoading(false);\n                message.info({\n                    content: 'Save listener successfully!',\n                    duration: 1,\n                    onClose: () => {\n                        let { history } = props;\n                        history.push('/listenerlist');\n                    }\n                });\n            }, delay);\n\n        }).catch(error => {\n            const delay = 2000;\n            setTimeout(() => {\n                setLoading(false);\n                message.error({\n                    content: 'Save listener error,the error is ' + error.message,\n                    duration: 3,\n                });\n            }, delay);\n\n        });\n    };\n\n\n    const createRoute = () => {\n        const isWeightRoute = baseConfigData.routeAlgorighm === \"WeightBasedRoute\";\n        const isHeaderBasedRoute = baseConfigData.routeAlgorighm === \"HeaderBasedRoute\";\n\n        const routes = baseConfigData.tableData.map((item) => ({\n            \"base_route\": {\n                \"endpoint\": item.endpoint,\n                \"try_file\": null\n            },\n            ...(isWeightRoute) && { weight: item.weight },\n            ...(isHeaderBasedRoute) && { header_key: item.headerkey },\n            ...(isHeaderBasedRoute) && {\n                header_value_mapping_type: {\n                    type: item.headerValueType,\n                    value: item.headerValueMatch\n                }\n            },\n        }));\n        return {\n            \"route_id\": routeId,\n            \"host_name\": null,\n            \"matcher\": {\n                \"prefix\": baseConfigData.prefix,\n                \"prefix_rewrite\": \"/\"\n            },\n            \"anomaly_detection\": collectAnomalyDetectionData(),\n            \"allow_deny_list\": collectAllowDenyData(),\n            \"authentication\": collectAuthenticationData(),\n            \"ratelimit\": collectRatelimitData(),\n            \"health_check\": collectHealthcheckData(),\n            \"liveness_config\": collectLivessConfigData(),\n            \"route_cluster\": {\n                \"type\": baseConfigData.routeAlgorighm,\n                \"routes\": routes\n            }\n        };\n    }\n    const collectLivessConfigData = () => {\n        const flag1 = !healthCheckData.healthCheckType || healthCheckData.healthCheckType === \"None\";\n        const flag2 =\n            !anomalyDetectionData.anomalyDetectionType || anomalyDetectionData.anomalyDetectionType === \"None\";\n\n        if (flag1 && flag2) {\n            return null;\n        }\n\n        return { min_liveness_count: livenessConfigData.minLivenessCount };\n    }\n    const updateRouteByRouteId = () => {\n        const newBaseRoute = createRoute();\n        Request.put(\"/route\", newBaseRoute).then(res => {\n            if (res.data.response_code === 0) {\n                message.info(\"Save listener successfully!\");\n            }\n        });\n    }\n    const collectAllowDenyData = () => {\n        if (!allowDenyData.allowDenyList) {\n            return null;\n        }\n        return allowDenyData.allowDenyList.map((item) => ({\n            limit_type: item.type,\n            value: item.value\n        }));\n    };\n    const collectHealthcheckData = () => {\n        if (!healthCheckData.healthCheckType || healthCheckData.healthCheckType === \"None\") {\n            return null;\n        }\n        const data = {\n            type: healthCheckData.healthCheckType,\n            base_health_check_param: {\n                timeout: healthCheckData.timeout,\n                interval: healthCheckData.interval\n            },\n            path: healthCheckData.path\n        };\n        return data;\n    };\n    const collectAnomalyDetectionData = () => {\n        if (!anomalyDetectionData.anomalyDetectionType || anomalyDetectionData.anomalyDetectionType === \"None\") {\n            return null;\n        }\n        const data = {\n            type: anomalyDetectionData.anomalyDetectionType,\n            consecutive_5xx: anomalyDetectionData.consecutive5xx,\n            base_anomaly_detection_param: {\n                ejection_second: anomalyDetectionData.ejectionSecond,\n            },\n        };\n        return data;\n    };\n    const collectAuthenticationData = () => {\n        if (!authenticationData.authenticationType || authenticationData.authenticationType === \"None\") {\n            return null;\n        }\n        const isApiKeyAuth = authenticationData.authenticationType === \"ApiKeyAuth\";\n        const isBasicAuth = authenticationData.authenticationType === \"BasicAuth\";\n        return {\n            type: authenticationData.authenticationType,\n            ...(isApiKeyAuth) && { key: authenticationData.authenticationObj.key },\n            ...(isApiKeyAuth) && { value: authenticationData.authenticationObj.value },\n            ...(isBasicAuth) && { credentials: authenticationData.authenticationObj.credentials },\n\n        };\n    };\n    const collectRatelimitData = () => {\n        if (!ratelimitData.ratelimitType || ratelimitData.ratelimitType === \"None\") {\n            return null;\n        }\n\n        const isTokenBucket = ratelimitData.ratelimitType === \"TokenBucketRateLimit\";\n        const isLocationOnIP = ratelimitData.limitLocationType === \"IP\";\n        const data = {\n            type: ratelimitData.ratelimitType,\n            rate_per_unit: ratelimitData.ratePerUnit,\n            unit: {\n                type: ratelimitData.unitType\n            },\n            ...(isTokenBucket) && { capacity: ratelimitData.bucketCapacity },\n            limit_location: {\n                type: ratelimitData.limitLocationType,\n                ...(isLocationOnIP) && { value: ratelimitData.ip },\n                ...(!isLocationOnIP) && { key: ratelimitData.headerKey },\n                ...(!isLocationOnIP) && { value: ratelimitData.headerValue },\n\n            }\n        };\n        return data;\n\n    };\n\n    return (\n        <div style={{ paddingTop: \"20px\", background: \"#f5f5f7\", height: \"100%\" }}>\n            <Spin size=\"large\" spinning={loading}>\n                <RowDiv>\n                    <Col xs={{ span: 16, offset: 4 }} style={{ height: \"60vh\" }}>\n                        <Card title={apiServiceId === undefined ? \"New Config\" : \"Change Config\"} extra={<Button type=\"primary\" onClick={handleSaveButtonOnClick}>Save</Button>}>\n                            <TabsDiv\n                                // centered={true}\n                                defaultActiveKey=\"1\"\n                                type=\"card\"\n                                size=\"large\"\n                                items={getTabs()}\n                            />\n                        </Card>\n                    </Col>\n\n                </RowDiv>\n            </Spin>\n        </div>\n    );\n\n}\nexport default withRouter(ConfigPage);","/home/sliu/code/github/silverwind-dashboard/src/component/ratelimit.jsx",[],"/home/sliu/code/github/silverwind-dashboard/src/component/allowDenyList.jsx",[],"/home/sliu/code/github/silverwind-dashboard/src/component/authentication.jsx",[],"/home/sliu/code/github/silverwind-dashboard/src/component/baseConfig.jsx",[],"/home/sliu/code/github/silverwind-dashboard/src/component/listenerListPage.jsx",["84","85"],"import React, { useState, useEffect } from 'react'\nimport { Row, Col, Button, Card,message } from 'antd';\n\nimport Request from '../utils/axiosUtils'\nimport { Table } from 'antd';\n\nimport { withRouter } from 'react-router-dom'\n\nimport styled from 'styled-components'\n\nconst RowDiv = styled(Row)`\nbackground: rgb(245, 245, 247);\n`;\nconst CardDiv = styled(Card)`\n.ant-card-body{\n    padding:0px;\n}\n`;\nfunction ListenerListPage(props) {\n    const [tableData, setTableData] = useState([])\n\n    useEffect(() => {\n\n        requestAppConfig();\n\n    }, []);\n    const requestAppConfig = () => {\n\n        Request.get(\"/appConfig\").then(res => {\n            if (res.data.response_code === 0) {\n                // setAppConfig(res.data.response_object.api_service_config);\n                // const set=new Map();\n                let tableData = res.data.response_object.api_service_config.flatMap((p) => {\n                    // \"port\": p.listen_port,\n                    // \"type\": \"HTTP\",\n                    return p.service_config.routes.map((item) => ({\n                        \"port\": p.listen_port,\n                        \"apiServiceId\":p.api_service_id,\n                        \"type\": p.service_config.server_type,\n                        \"pathPrefix\": item.matcher.prefix,\n                        \"routeId\": item.route_id\n                    }));\n                });\n                setTableData(tableData);\n            }\n        }).catch(error=>{\n            console.error(error);\n            message.error(\"Cause error when request the silverwind admin port,the error is \"+error.message);\n        });\n\n    }\n\n    const handleEditOnClick = (record) => {\n        const { apiServiceId, routeId } = record\n        let { history } = props;\n        history.push('/configPage?apiServiceId=' + apiServiceId + \"&routeId=\" + routeId);\n    }\n    const handleDeleteOnClick = (record) => {\n        const { routeId } = record;\n        Request.delete(\"/route/\"+routeId).then(res=>{\n            if (res.data.response_code === 0) {\n                message.info({\n                    content: 'Delete route successfully!',\n                    duration: 3,\n                    onClose: () => {\n                        window.location.reload();\n\n                    }\n                  });\n            }\n        });\n        // Request.get(\"/appConfig\").then(res => {\n        //     if (res.data.response_code === 0) {\n        //         const apiConfigs = res.data.response_object.api_service_config;\n        //         const newApiConfigs=apiConfigs.map(item=>{\n        //             const newRoutes=item.service_config.routes.filter(route=>route.route_id!==routeId);\n        //             if(newRoutes.length>0){\n        //                 item.service_config.routes=newRoutes;\n        //                 return item;\n        //             }else{\n        //                 return undefined;\n        //             }\n        //         }).filter(item=>item!==undefined);\n\n    \n    \n        //         Request.post(\"/appConfig\", newApiConfigs).then(res => {\n        //             message.info({\n        //                 content: 'Delete route successfully!',\n        //                 duration: 3,\n        //                 onClose: () => {\n        //                     window.location.reload();\n\n        //                 }\n        //               });\n        //         });\n    \n        //     }\n        // });\n    }\n    const columns = [\n        {\n            title: 'Port',\n            dataIndex: 'port',\n            key: \"port\",\n            width: '30%',\n            sorter: (a, b) => a.port - b.port,\n            defaultSortOrder: 'descend',\n        },\n        {\n            title: 'Type',\n            dataIndex: 'type',\n            key: \"type\",\n            sorter: (a, b) => a.type.length - b.type.length,\n            defaultSortOrder: 'descend',\n        }, {\n            title: 'Path Prefix',\n            dataIndex: 'pathPrefix',\n            key: \"pathPrefix\",\n            sorter: (a, b) => a.pathPrefix.length - b.pathPrefix.length,\n            defaultSortOrder: 'descend',\n        },\n        {\n            title: 'Operation',\n            dataIndex: 'detail',\n            key: \"detail\",\n            render: (text, record) =>\n                <>\n                    <Row>\n                        <Col span={4}>\n                        <a style={{ \"cursor\": \"pointer\" }} onClick={() => handleEditOnClick(record)}>Edit</a>\n                        </Col>\n                        <Col>\n                        <a style={{ \"cursor\": \"pointer\" }} onClick={() => handleDeleteOnClick(record)}>Delete</a>\n                        </Col>\n                    </Row>\n                </>,\n\n        },\n\n    ];\n    const onChange = (pagination, filters, sorter, extra) => {\n        console.log('params', pagination, filters, sorter, extra);\n    };\n    const handleCreateButtonOnClick = () => {\n        let { history } = props;\n        history.push('/configPage');\n    }\n    return (\n        <div style={{ paddingTop: \"20px\", background: \"#f5f5f7\", height: \"100%\" }}>\n\n            <RowDiv>\n                <Col xs={{ span: 16, offset: 4 }} >\n\n                    <RowDiv >\n\n                        <Col xs={{ span: 24 }} >\n                            <CardDiv title=\"Connection Listener\" bordered={false} extra={<Button type=\"primary\" onClick={handleCreateButtonOnClick}>Create New Listener</Button>}>\n                                <Table columns={columns} dataSource={tableData} onChange={onChange} rowKey=\"routeId\" />\n                            </CardDiv>\n                        </Col>\n\n                    </RowDiv>\n\n                </Col>\n\n\n            </RowDiv>\n            {/* </Spin> */}\n        </div>\n    );\n\n}\nexport default withRouter(ListenerListPage);","/home/sliu/code/github/silverwind-dashboard/src/component/startupPage.jsx",[],"/home/sliu/code/github/silverwind-dashboard/src/component/healthCheck.jsx",["86"],"import React from 'react'\nimport { Row, Col,  InputNumber,  Form, Input } from 'antd';\nimport { Select } from 'antd';\n\nconst { Option } = Select;\nconst layout = {\n    labelCol: {\n        span: 6,\n    },\n    wrapperCol: {\n        span: 8,\n    },\n};\n\n\n\nfunction HealthCheck(props) {\n    // const [ratelimitType, setRatelimitType] = useState(\"None\");\n    // const [limitLocationType, setLimitLocationType] = useState(\"ip\");\n    const [form] = Form.useForm();\n\n    const healthCheckTypeSelectOption = () => {\n        return [\n            {\n                value: 'HttpGet',\n                label: 'Http Get',\n            },\n            {\n                value: 'None',\n                label: 'None',\n            },\n        ];\n    }\n    const handleHealthCheckTypeOptionOnChange = (value) => {\n        props.setHealthCheckData(previousState => ({\n            ...previousState,\n            healthCheckType: value\n        }));\n        // setRatelimitType(value);\n    };\n    const handleIntervalOnChange=(value)=>{\n        props.setHealthCheckData(previousState => ({\n            ...previousState,\n            interval: value\n        }));\n    }\n    const handleTimeoutOnChange=(value)=>{\n        props.setHealthCheckData(previousState => ({\n            ...previousState,\n            timeout: value\n        }));\n    }\n    const handleMinLivenessCountChange=(value)=>{\n        props.setLivenessConfigData(previousState => ({\n            ...previousState,\n            minLivenessCount: value\n        }));\n    }\n    const handlePathOnChange=(e)=>{\n        props.setHealthCheckData(previousState => ({\n            ...previousState,\n            path: e.target.value\n        }));\n    }\n    const onFinish = (values) => {\n        console.log(values);\n    };\n\n    const tokenBucketDiv = () => {\n        return (\n            <Row style={{ paddingTop: 20 }}>\n                <Col span={24} >\n                    <Form\n                        {...layout}\n                        form={form}\n                        name=\"control-hooks\"\n                        onFinish={onFinish}\n\n                    >\n                        <Form.Item\n                            name=\"interval\"\n                            label=\"Interval\"\n                            rules={[\n                                {\n                                    required: true,\n                                },\n                            ]}\n                        >\n                            <InputNumber onChange={handleIntervalOnChange}   defaultValue={props.healthCheckData?.interval} min={1}/>\n                        </Form.Item>\n                        <Form.Item\n                            name=\"timeout\"\n                            label=\"Timeout\"\n                            rules={[\n                                {\n                                    required: true,\n                                },\n                            ]}\n                        >\n                            <InputNumber onChange={handleTimeoutOnChange}   defaultValue={props.healthCheckData?.timeout} min={1}/>\n                        </Form.Item>\n                        <Form.Item\n                            name=\"minLivenessCount\"\n                            label=\"Min Liveness Count\"\n                            rules={[\n                                {\n                                    required: true,\n                                },\n                            ]}\n                        >\n                            <InputNumber onChange={handleMinLivenessCountChange}   defaultValue={props.livenessConfigData?.minLivenessCount} min={1}/>\n                        </Form.Item>\n                        <Form.Item\n                            name=\"path\"\n                            label=\"Path\"\n                            rules={[\n                                {\n                                    required: true,\n                                },\n                            ]}\n                        >\n                            <Input onChange={handlePathOnChange}   defaultValue={props.healthCheckData?.path} min={1}/>\n                        </Form.Item>\n                        \n                        {/* <Form.Item {...tailLayout}>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Submit\n                            </Button>\n                        </Form.Item> */}\n                    </Form>\n                </Col>\n            </Row>\n        );\n    }\n\n    return (\n        <div style={{ padding: 20 }}>\n            <Row>\n                <Col span={4} offset={6}>\n                    <Select\n                        defaultValue={props.healthCheckData?.healthCheckType?props.healthCheckData?.healthCheckType:\"None\"}\n                        style={{ width: 180 }}\n                        options={healthCheckTypeSelectOption()}\n                        onChange={handleHealthCheckTypeOptionOnChange}\n                    />\n                </Col>\n                <Col span={20}></Col>\n                <Col span={24}>\n                    {(!props.healthCheckData?.healthCheckType||props.healthCheckData.healthCheckType === \"None\") ? <></> : tokenBucketDiv()}\n                </Col>\n            </Row>\n        </div>\n    );\n\n\n}\nexport default HealthCheck;","/home/sliu/code/github/silverwind-dashboard/src/component/anomalyDetection.jsx",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":35,"column":20,"nodeType":"93","messageId":"94","endLine":35,"endColumn":31},{"ruleId":"91","severity":1,"message":"95","line":36,"column":16,"nodeType":"93","messageId":"94","endLine":36,"endColumn":23},{"ruleId":"96","severity":1,"message":"97","line":13,"column":40,"nodeType":"98","messageId":"99","endLine":13,"endColumn":41},{"ruleId":"96","severity":1,"message":"97","line":13,"column":46,"nodeType":"98","messageId":"99","endLine":13,"endColumn":47},{"ruleId":"91","severity":1,"message":"95","line":45,"column":18,"nodeType":"93","messageId":"94","endLine":45,"endColumn":25},{"ruleId":"91","severity":1,"message":"100","line":47,"column":18,"nodeType":"93","messageId":"94","endLine":47,"endColumn":25},{"ruleId":"91","severity":1,"message":"101","line":31,"column":12,"nodeType":"93","messageId":"94","endLine":31,"endColumn":21},{"ruleId":"102","severity":1,"message":"103","line":57,"column":8,"nodeType":"104","endLine":57,"endColumn":10,"suggestions":"105"},{"ruleId":"91","severity":1,"message":"106","line":424,"column":19,"nodeType":"93","messageId":"94","endLine":424,"endColumn":28},{"ruleId":"107","severity":1,"message":"108","line":131,"column":25,"nodeType":"109","endLine":131,"endColumn":102},{"ruleId":"107","severity":1,"message":"108","line":134,"column":25,"nodeType":"109","endLine":134,"endColumn":104},{"ruleId":"91","severity":1,"message":"110","line":5,"column":9,"nodeType":"93","messageId":"94","endLine":5,"endColumn":15},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'setHasLogin' is assigned a value but never used.","Identifier","unusedVar","'setHost' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&' and '|'. Use parentheses to clarify the intended order of operations.","BinaryExpression","unexpectedMixedOperator","'setPort' is assigned a value but never used.","'appConfig' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'requestAppConfig' and 'searchParam'. Either include them or remove the dependency array.","ArrayExpression",["113"],"'timeoutId' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Option' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},"Update the dependencies array to be: [requestAppConfig, searchParam]",{"range":"116","text":"117"},[2011,2013],"[requestAppConfig, searchParam]"]