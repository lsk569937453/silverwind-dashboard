[{"/home/sliu/code/github/silverwind-dashboard/src/index.js":"1","/home/sliu/code/github/silverwind-dashboard/src/App.js":"2","/home/sliu/code/github/silverwind-dashboard/src/reportWebVitals.js":"3","/home/sliu/code/github/silverwind-dashboard/src/component/routerMap.js":"4","/home/sliu/code/github/silverwind-dashboard/src/utils/commonUtils.js":"5","/home/sliu/code/github/silverwind-dashboard/src/utils/axiosUtils.js":"6","/home/sliu/code/github/silverwind-dashboard/src/component/dashboardPage.jsx":"7","/home/sliu/code/github/silverwind-dashboard/src/component/detailPage.jsx":"8","/home/sliu/code/github/silverwind-dashboard/src/component/configPage.jsx":"9","/home/sliu/code/github/silverwind-dashboard/src/component/ratelimit.jsx":"10","/home/sliu/code/github/silverwind-dashboard/src/component/allowDenyList.jsx":"11","/home/sliu/code/github/silverwind-dashboard/src/component/authentication.jsx":"12","/home/sliu/code/github/silverwind-dashboard/src/component/baseConfig.jsx":"13","/home/sliu/code/github/silverwind-dashboard/src/component/listenerListPage.jsx":"14","/home/sliu/code/github/silverwind-dashboard/src/component/startupPage.jsx":"15"},{"size":457,"mtime":1680143920991,"results":"16","hashOfConfig":"17"},{"size":2737,"mtime":1680361936933,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1680143920991,"results":"19","hashOfConfig":"17"},{"size":574,"mtime":1680360086153,"results":"20","hashOfConfig":"17"},{"size":1307,"mtime":1680183026398,"results":"21","hashOfConfig":"17"},{"size":3127,"mtime":1680589999028,"results":"22","hashOfConfig":"17"},{"size":4296,"mtime":1680361461687,"results":"23","hashOfConfig":"17"},{"size":16074,"mtime":1680182676662,"results":"24","hashOfConfig":"17"},{"size":16801,"mtime":1680590033561,"results":"25","hashOfConfig":"17"},{"size":8111,"mtime":1680185171419,"results":"26","hashOfConfig":"17"},{"size":4855,"mtime":1680221443407,"results":"27","hashOfConfig":"17"},{"size":4065,"mtime":1680185031983,"results":"28","hashOfConfig":"17"},{"size":14628,"mtime":1680579352187,"results":"29","hashOfConfig":"17"},{"size":5344,"mtime":1680582993489,"results":"30","hashOfConfig":"17"},{"size":3352,"mtime":1680518850038,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1v0ug5o",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},"/home/sliu/code/github/silverwind-dashboard/src/index.js",[],["70","71"],"/home/sliu/code/github/silverwind-dashboard/src/App.js",["72","73","74","75"],"import  React,  { useState, useEffect }from 'react';\nimport useLocalStorage from \"use-local-storage\";\nimport StartupPage from \"./component/startupPage\"\nimport './App.css';\nimport router from './component/routerMap'\nimport Request from './utils/axiosUtils'\nimport CommonUtils from \"./utils/commonUtils\";\nimport {  Row, Col } from 'antd';\nimport {\n  HashRouter  as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\";\n\nimport styled from 'styled-components'\n\nconst MainDiv = styled.div`\nheight:95%;\n`;\nconst MenuDiv = styled.div`\nbackground:rgba(0,0,0,0.8);\n/* color: #fff; */\npadding-top:15px;\npadding-bottom:15px;\nh4{ \n  font-family:'Microsoft YaHei';\n  color:#f5f5f7;\n}\n`;\nconst ColCss = styled(Col)`\ntext-align:left;\n`\nfunction App(props) {\n\n  const [hasLogin, setHasLogin] = useState(true)\n  const [host, setHost] = useLocalStorage(\"host\",undefined);\n\n  // let { history } = props;\n  // history.push('/listenerlist');\n\n  const getKey=()=>{\n    return CommonUtils.guid();\n  }\n  const handleResetButtonOnClick=()=>{\n    localStorage.clear();\n    window.location.reload();\n  }\n  const dashboardPage=()=>{\n    return  ( \n      <Router>\n        <MainDiv>\n          <MenuDiv align=\"middle\" type=\"flex\" justify=\"center\">\n            <Row>\n              \n              <ColCss span={2} offset={4}>\n                <Link to=\"/\">\n                  <h4>SilverWind-Dashboard</h4>\n                </Link>\n              </ColCss>\n              <ColCss span={2} offset={1} >\n                <Link to=\"/listenerlist\">\n                  <h4>Listener List</h4>\n                </Link>\n              </ColCss>\n              <ColCss span={2} offset={12}>\n                <Link  onClick={handleResetButtonOnClick}>\n                  <h4>Reset Dashboard</h4>\n                </Link>\n              </ColCss>\n              {/* <ColCss span={2} >\n                <Link to=\"/\">\n                  <h4>TCP</h4>\n                </Link>\n              </ColCss> */}\n\n            \n            </Row>\n          </MenuDiv>\n          <Switch>\n            {\n              router.map((item, key) => {\n                return (\n                  <Route key={key} path={item.path} exact render={\n                    props => (\n                      !item.auth ? (< item.component {...props} key={getKey}/>) :\n                        (hasLogin ? <item.component {...props}  key={getKey}/> : <div/>)\n                    )\n                  } />\n                )\n              })\n            }\n          </Switch>\n        </MainDiv>\n      </Router>\n    );\n  }\n  const mainPage=()=>{\n    if(host){\n      return dashboardPage();\n    }else{\n      return <StartupPage/>;\n    }\n    \n  }\n  return (<>\n    {\n      \n      mainPage()\n    }\n    </>\n  );\n}\n\nexport default App;\n","/home/sliu/code/github/silverwind-dashboard/src/reportWebVitals.js",[],"/home/sliu/code/github/silverwind-dashboard/src/component/routerMap.js",[],"/home/sliu/code/github/silverwind-dashboard/src/utils/commonUtils.js",["76","77"],"export default class CommonUtils {\n    /**\n     * 判断字符串是否为空\n     * @param str\n     * @returns {boolean}\n     */\n    static isNull(str) {\n        return str == null || str.length === 0 || str === '';\n    }\n    static guid() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0,\n                v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n \n    /**\n     *\n     * @desc  判断是否为身份证号\n     * @param  {String|Number} str\n     * @return {Boolean}\n     */\n    static isIdCard(str) {\n        return /^(^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$)|(^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d{4})|\\d{3}[Xx])$)$/.test(str)\n    }\n    static checkIsIPV4(entry) {\n        var blocks = entry.split(\".\");\n        if(blocks.length === 4) {\n          return blocks.every(function(block) {\n            return parseInt(block,10) >=0 && parseInt(block,10) <= 255;\n          });\n        }\n        return false;\n      }\n    /**\n     *\n     * @desc   判断是否为手机号\n     * @param  {String|Number} str\n     * @return {Boolean}\n     */\n    static isPhoneNum(str) {\n        return /^(0|86|17951)?(1[3-9][0-9])[0-9]{8}$/.test(str)\n    }\n}\n","/home/sliu/code/github/silverwind-dashboard/src/utils/axiosUtils.js",["78","79"],"import axios from 'axios'; // 引入axios\nimport lodash from 'lodash';\n\n\nvar Request = axios.create(\n    {\n\n        timeout: 1000000,\n        headers: {    \n         'userAgent': navigator.userAgent,\"Access-Control-Allow-Origin\": \"*\"\n        , 'Access-Control-Allow-Methods':'GET,POST'}\n    }\n);\n// delete axios.defaults.headers.common[\"Authorization\"];\nRequest.interceptors.request.use(async config => {\n    const host=JSON.parse(localStorage.getItem(\"host\"));\n    const port=JSON.parse(localStorage.getItem(\"port\"));\n    //  config.baseURL=await getBaseUrl(); \n    config.baseURL=`http://${host}:${port}/`;\n\n     return config; \n   \n}, error => {\n    return Promise.reject(error);\n});\n\nvar fetchError=(a,b,v)=>{\n\n};\nRequest.interceptors.response.use(response => {\n    let { data, config } = response;\n\n    if (data === '') {\n        let message = '数据不存在';\n        fetchError(message, 200, config);\n        return Promise.reject(message);\n    }\n\n    let { resCode, message } = data;\n\n    if (resCode===-2) {\n        let message = 'token不合法或者已经过期';\n        fetchError(message, -2, config);\n        return Promise.reject(message);\n    }\n\n    // if (resCode!==0) {\n    //     fetchError(message, resCode, config);\n    //     return Promise.reject(message);\n    // }\n    \n    return response;\n}, error => {\n    if (error && error.response) {\n        switch (error.response.status) {\n            case 400:\n                error.message = '错误请求';\n                break;\n            case 401:\n                error.message = '未授权，请重新登录';\n                break;\n            case 403:\n                error.message = '拒绝访问';\n                break;\n            case 404:\n                error.message = '请求错误,未找到该资源';\n                break;\n            case 405:\n                error.message = '请求方法未允许';\n                break;\n            case 408:\n                error.message = '请求超时';\n                break;\n            case 500:\n                error.message = `${error.response.data}`;\n                break;\n            case 501:\n                error.message = '网络未实现';\n                break;\n            case 502:\n                error.message = '网络错误';\n                break;\n            case 503:\n                error.message = '服务不可用';\n                break;\n            case 504:\n                error.message = '网络超时';\n                break;\n            case 505:\n                error.message = 'http版本不支持该请求';\n                break;\n            default:\n                error.message = `连接错误${error.response.status}`;\n        }\n        let errorData = {\n            status: error.response.status,\n            message: error.message,\n            config: error.response.config\n        };\n        fetchError(errorData.message, errorData.status, errorData.config);\n    } else {\n        fetchError(error.message, '000', error.config);\n    }\n    return Promise.reject(error);\n});\nRequest.all = axios.all;\nRequest.spread = axios.spread;\nexport default Request\n","/home/sliu/code/github/silverwind-dashboard/src/component/dashboardPage.jsx",["80","81","82","83","84","85"],"import React,{ useState, useEffect } from 'react'\nimport { Row, Col,Input,Button } from 'antd';\n\nimport { withRouter } from 'react-router-dom'\n\nimport styled from 'styled-components'\nimport useLocalStorage from \"use-local-storage\";\n\nimport ReactECharts from 'echarts-for-react';\n\nconst LineDiv = styled.div`\ndisplay: inline-block;\nbackground:#fff;\npadding-left: 10px;\n    padding-right: 10px;\n    border-radius: 10px;\n`;\nconst FontDiv = styled.div`\nfont-size: 60px;\n    font-weight: bold;\n`\nconst APIFontDiv = styled.div`\nfont-size: 21px;\n    font-weight: bold;\n    padding-top: 10px;\n    text-align: center;\n    color: rgba(0,0,0,0.25);\n`\nconst EntrypointsDiv = styled.div`\nfont-size: 30px;\n    font-weight: bold;\n    padding-bottom: 10px;\n\n`;\nconst Maindiv = styled.div`\nbackground: #fff;\n`\n\nconst RowDiv = styled(Row)`\nbackground: rgb(245, 245, 247);\n`;\n\nfunction DashboardPage(props) {\n\n    const [host, setHost] = useLocalStorage(\"host\",undefined);\n   \n    const [port, setPort] = useLocalStorage(\"port\",undefined);\n    const getHttpOptions = () => {\n        return {\n            grid: { top: 40, right: 8, bottom: 40, left: 20,containLabel: true  },\n            xAxis: {\n                type: 'category',\n                name: 'Date',\n                nameLocation: 'middle',\n                 nameGap: 30,\n                data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n            },\n            yAxis: {\n                type: 'value',\n                name: 'Request Per Day',\n            },\n            series: [\n                {\n                    data: [820, 932, 901, 934, 1290, 1330, 1320],\n                    type: 'line',\n                    smooth: true,\n                },\n            ],\n            tooltip: {\n                trigger: 'axis',\n            },\n        };\n    };\n    const getTcpOptions = () => {\n        return {\n            grid: { top: 40, right: 8, bottom: 40, left: 20,containLabel: true   },\n            xAxis: {\n                type: 'category',\n                data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n                name: 'Date',\n                nameLocation: 'middle',\n                 nameGap: 30,\n            },\n            yAxis: {\n                type: 'value',\n                name: 'Request Per Day',\n            },\n            series: [\n                {\n                    data: [160, 250, 270, 320, 400, 450, 300],\n                    type: 'line',\n                    smooth: true,\n                },\n            ],\n            tooltip: {\n                trigger: 'axis',\n            },\n        };\n    };\n   \n    return (\n        <div style={{ paddingTop: \"20px\", background: \"#f5f5f7\", height: \"100%\" }}>\n\n            {/* <Spin spinning={pageStage}> */}\n            <RowDiv>\n                <Col xs={{ span: 16, offset: 4 }} >\n\n                    <RowDiv >\n\n                        <Col xs={{ span: 24 }} >\n                    \n                            <EntrypointsDiv>Entrypoints:</EntrypointsDiv>\n                            <Maindiv>\n                                <RowDiv gutter={4} justify=\"start\" style={{ paddingBottom: \"20px\" }} >\n                                    <Col span={4} >\n                                        <LineDiv>\n                                            <APIFontDiv>ADMIN API</APIFontDiv>\n                                            <FontDiv>http://{host}:{port}</FontDiv>\n                                        </LineDiv>\n                                    </Col>\n\n                                    <Col span={4} >\n                                    </Col>\n\n                                </RowDiv>\n                            </Maindiv>\n                        </Col>\n                        <Col xs={{ span: 24 }} >\n                            <EntrypointsDiv>HTTP</EntrypointsDiv>\n                            <ReactECharts option={getHttpOptions()} />\n                        </Col>\n                        <Col xs={{ span: 24 }} >\n                            <EntrypointsDiv>TCP</EntrypointsDiv>\n                            <ReactECharts option={getTcpOptions()} />\n                        </Col>\n                    </RowDiv>\n\n                </Col>\n\n\n            </RowDiv>\n            {/* </Spin> */}\n        </div>\n    );\n\n}\nexport default withRouter(DashboardPage);","/home/sliu/code/github/silverwind-dashboard/src/component/detailPage.jsx",["86","87","88"],"/home/sliu/code/github/silverwind-dashboard/src/component/configPage.jsx",["89","90","91"],"import React, { useState, useEffect } from 'react'\nimport { Row, Col, Card, Button, message, Tabs } from 'antd';\nimport { useLocation } from 'react-router-dom'\n\nimport Request from '../utils/axiosUtils'\n\nimport { withRouter } from 'react-router-dom'\n\nimport CommonUtils from '../utils/commonUtils'\nimport styled from 'styled-components'\n\nimport BaseConfig from './baseConfig'\nimport AllowDenyList from './allowDenyList';\nimport Authentication from './authentication';\nimport Ratelimit from './ratelimit';\nconst RowDiv = styled(Row)`\nbackground: rgb(245, 245, 247);\n\n`;\nconst TabsDiv = styled(Tabs)`\n.ant-tabs-content-holder{\n    background:white;\n}\nheight : 80vh;\n`\n\n\nfunction ConfigPage(props) {\n    const [appConfig, setAppConfig] = useState({});\n    const [baseConfigData, setBaseConfigData] = useState({})\n    const [allowDenyData, setAllowDenyData] = useState({})\n    const [authenticationData, setAuthenticationData] = useState({})\n    const [ratelimitData, setRatelimitData] = useState({})\n    const [apiServiceId, setApiServiceId] = useState(undefined);\n    const [routeId, setRouteId] = useState(undefined);\n    // const ratelimitForm=Form.useForm();\n    const location = useLocation();\n    const searchParam = new URLSearchParams(location.search);\n    useEffect(() => {\n        var currentApiServiceId = searchParam.get(\"apiServiceId\");\n        if (!currentApiServiceId) {\n            return;\n        }\n        var routeId = searchParam.get(\"routeId\");\n        if (!routeId) {\n            return;\n        }\n        setApiServiceId(currentApiServiceId);\n        setRouteId(routeId);\n        requestAppConfig(currentApiServiceId,routeId);\n    }, []);\n    const requestAppConfig = (currentApiServiceId, routeId) => {\n        Request.get(\"/appConfig\").then(res => {\n            if (res.data.response_code === 0) {\n                const apiServiceConfig=res.data.response_object.api_service_config.filter(item => item.api_service_id === currentApiServiceId)[0];\n                const apiConfigs = apiServiceConfig.service_config.routes.filter(item => item.route_id === routeId)[0];\n                setAppConfig(apiConfigs);\n                constructConfigData(apiConfigs, apiServiceConfig.listen_port);\n                constructAllowDenyData(apiConfigs);\n                constructAuthenticationData(apiConfigs);\n                constructRatelimitData(apiConfigs);\n                console.log(apiConfigs);\n            }\n        });\n\n    }\n    const constructConfigData = (appConfig, currentPort) => {\n        const tableData = appConfig?.route_cluster?.routes.map(item => ({\n            endpoint: item.base_route.endpoint,\n            key: CommonUtils.guid(),\n            weight: item.weight ? item.weight : 100,\n            headerkey: item.header_key ? item.header_key : \"user-agent\",\n            headerValueType: item.header_value_mapping_type?.type ? item.header_value_mapping_type?.type : \"TEXT\",\n            headerValueMatch: \"test\"\n        }));\n        const port = currentPort;\n        const prefix = appConfig?.matcher?.prefix;\n        const routeAlgorighm = appConfig?.route_cluster?.type;\n        setBaseConfigData({\n            tableData: tableData,\n            port: port,\n            prefix: prefix,\n            routeAlgorighm: routeAlgorighm,\n            isCreate:currentPort,\n        });\n    }\n    const constructAllowDenyData = (appConfig) => {\n        let allowDenyList = appConfig?.allow_deny_list?.map((item) => {\n            let typeLabel = item.limit_type;\n            if (typeLabel === \"ALLOWALL\") {\n                typeLabel = \"ALLOW-ALL\";\n            } else if (typeLabel === \"DENYALL\") {\n                typeLabel = \"DENY-ALL\";\n            }\n            return {\n                \"type\": item.limit_type,\n                \"typeLabel\": typeLabel,\n                \"value\": item.value,\n                \"key\": CommonUtils.guid()\n            };\n        });\n        if (allowDenyList == null) {\n            allowDenyList = [];\n        }\n        setAllowDenyData({\n            allowDenyList: allowDenyList\n        });\n    }\n    const constructAuthenticationData = (appConfig) => {\n        let defaultType = \"None\";\n        let type = appConfig?.authentication?.type;\n        if (!type) {\n            type = defaultType;\n        }\n\n        setAuthenticationData({\n            authenticationType: type,\n            authenticationObj: appConfig?.authentication\n        });\n    }\n    const constructRatelimitData = (appConfig) => {\n        let defaultType = \"None\";\n        let defaultLimitLocationType = \"IP\";\n        let type = appConfig?.ratelimit?.type;\n        let limitLocationType = appConfig.ratelimit?.limit_location?.type;\n        if (type == null) {\n            type = defaultType;\n        }\n        if (limitLocationType == null) {\n            limitLocationType = defaultLimitLocationType;\n        }\n\n        setRatelimitData({\n            ratelimitType: type,\n            limitLocationType: limitLocationType,\n            bucketCapacity: appConfig.ratelimit?.capacity,\n            ratePerUnit: appConfig.ratelimit?.rate_per_unit,\n            ip: appConfig.ratelimit?.limit_location?.value,\n            headerKey: appConfig.ratelimit?.limit_location?.key,\n            headerValue: appConfig.ratelimit?.limit_location?.value,\n            unitType: appConfig.ratelimit?.unit?.type,\n            // form:ratelimitForm,\n        });\n    }\n    const getTabs = () => {\n        const firstPage = {\n            label: `Base Config`,\n            key: 1,\n            children: <BaseConfig baseConfigData={baseConfigData} setBaseConfigData={setBaseConfigData} />,\n        };\n        const secondPage = {\n            label: `Allow Deny List`,\n            key: 2,\n            children: <AllowDenyList allowDenyData={allowDenyData} setAllowDenyData={setAllowDenyData} />,\n        };\n        const thirdPage = {\n            label: `Authentication`,\n            key: 3,\n            children: <Authentication authenticationData={authenticationData} setAuthenticationData={setAuthenticationData} />,\n        };\n        const forthPage = {\n            label: `Rate limit`,\n            key: 4,\n            children: <Ratelimit ratelimitData={ratelimitData} setRatelimitData={setRatelimitData} />,\n        };\n        return [firstPage, secondPage, thirdPage, forthPage];\n\n    };\n    const handleSaveButtonOnClick = () => {\n        if (!checkBeforeRequest()) {\n            return false;\n        }\n        if (!apiServiceId) {\n            createApiServiceConfigOrAddRoute();\n        } else {\n            updateRouteByRouteId();\n        }\n\n    }\n    const checkBeforeRequest = () => {\n        if (!baseConfigData.serverType) {\n            message.error('Please select the server type!');\n            return false;\n        }\n        if(baseConfigData.serverType===\"HTTPS\"){\n            if (!baseConfigData.certPerm) {\n                message.error('Please fill the cert perm!');\n                return false;\n            }\n            if (!baseConfigData.keyPerm) {\n                message.error('Please fill the key perm!');\n                return false;\n            }\n           \n        }\n        if (!baseConfigData.port) {\n            message.error('Please fill the port!');\n            return false;\n        }\n        if (!baseConfigData.prefix) {\n            message.error('Please fill the prefix!');\n            return false;\n        }\n        if (!baseConfigData.routeAlgorighm) {\n            message.error('Please select the routeAlgorighm!');\n            return false;\n        }\n        if (!baseConfigData.tableData || baseConfigData.tableData.length === 0) {\n            message.error('Please fill the route!');\n            return false;\n        }\n        if(authenticationData.authenticationType&&authenticationData.authenticationType!==\"None\"){\n            if(authenticationData.authenticationType===\"ApiKeyAuth\"){\n                if(!authenticationData.authenticationObj?.key||!authenticationData.authenticationObj?.value){\n                    message.error('Please fill the key and value for Authentication!');\n                    return false;\n                }\n            }else if(authenticationData.authenticationType===\"BasicAuth\"){\n                if(!authenticationData.authenticationObj?.credentials){\n                    message.error('Please fill the credentials for Authentication!');\n                    return false;\n                }\n            }\n        }\n        if(ratelimitData.ratelimitType&&ratelimitData.ratelimitType!==\"None\"){\n            if(ratelimitData.ratelimitType===\"TokenBucketRateLimit\"){\n                if(!ratelimitData.bucketCapacity){\n                    message.error('Please fill the bucket capacity for rate limit!');\n                    return false;\n                }\n            }\n            if(!ratelimitData.ratePerUnit){\n                message.error('Please fill the rate per unit for rate limit!');\n                return false;\n            }\n            if(!ratelimitData.unitType){\n                message.error('Please fill the ratelimit unit type for rate limit!');\n                return false;\n            }\n            if(!ratelimitData.limitLocationType){\n                message.error('Please fill the limit location type for rate limit!');\n                return false;\n            }\n            \n            if(ratelimitData.limitLocationType===\"IP\"){\n                if(!ratelimitData.ip){\n                    message.error('Please fill the ip for rate limit!');\n                    return false;\n                }\n                if(!CommonUtils.checkIsIPV4(ratelimitData.ip)){\n                    message.error('Please fill the legal ip for rate limit!');\n                    return false;\n                }\n            }\n            if(ratelimitData.limitLocationType===\"Header\"){\n                if(!ratelimitData.headerKey){\n                    message.error('Please fill the headerKey for rate limit!');\n                    return false;\n                }\n                if(!ratelimitData.headerValue){\n                    message.error('Please fill the headerValue for rate limit!');\n                    return false;\n                }\n            }\n            \n        }\n        return true;\n\n    }\n    const createApiServiceConfigOrAddRoute = () => {\n        const cert_str=baseConfigData.serverType===\"HTTPS\"?baseConfigData.certPerm:null;\n        const key_str=baseConfigData.serverType===\"HTTPS\"?baseConfigData.keyPerm:null;\n\n        const newRoute = createRoute();\n        const newServiceConfig = {\n            \"listen_port\": baseConfigData.port,\n            \"service_config\": {\n                \"server_type\": baseConfigData.serverType,\n                \"cert_str\": cert_str,\n                \"key_str\": key_str,\n                \"routes\": [\n                    newRoute\n                ]\n            }\n        };\n        Request.get(\"/appConfig\").then(res => {\n            if (res.data.response_code === 0) {\n                const apiConfigs = res.data.response_object.api_service_config;\n                const portIsContained=apiConfigs.some(item=>item.listen_port===baseConfigData.port);\n                let newApiConfigs={};\n                if(portIsContained){\n                     newApiConfigs = apiConfigs.map(config => {\n                        if (config.listen_port === baseConfigData.port) {\n                            config.service_config.routes = [...config.service_config.routes,newRoute];\n                        return config;\n                        }\n                    }); \n                }else{\n                    newApiConfigs=[...apiConfigs,newServiceConfig];\n                }\n    \n    \n                Request.post(\"/appConfig\", newApiConfigs).then(res => {\n                    message.info({\n                        content: 'Save listener successfully!',\n                        duration: 3,\n                        onClose: () => {\n                        let { history } = props;\n                        history.push('/listenerlist');\n                        }\n                      });\n                }).catch(error=>{\n                    message.error({\n                        content: 'Save listener error,the error is '+error.message,\n                        duration: 3,\n                      });\n                });\n    \n            }\n        });\n    };\n\n\nconst createRoute = () => {\n    const isWeightRoute = baseConfigData.routeAlgorighm === \"WeightBasedRoute\";\n    const isHeaderBasedRoute = baseConfigData.routeAlgorighm === \"HeaderBasedRoute\";\n\n    const routes = baseConfigData.tableData.map((item) => ({\n        \"base_route\": {\n            \"endpoint\": item.endpoint,\n            \"try_file\": null\n        },\n        ...(isWeightRoute) && { weight: item.weight },\n        ...(isHeaderBasedRoute) && { header_key: item.headerkey },\n        ...(isHeaderBasedRoute) && {\n            header_value_mapping_type: {\n                type: item.headerValueType,\n                value: item.headerValueMatch\n            }\n        },\n    }));\n    return {\n        \"route_id\": routeId,\n        \"host_name\": null,\n        \"matcher\": {\n            \"prefix\": baseConfigData.prefix,\n            \"prefix_rewrite\": \"ssss\"\n        },\n        \"allow_deny_list\": collectAllowDenyData(),\n        \"authentication\": collectAuthenticationData(),\n        \"ratelimit\": collectRatelimitData(),\n        \"route_cluster\": {\n            \"type\": baseConfigData.routeAlgorighm,\n            \"routes\": routes\n        }\n    };\n}\nconst updateRouteByRouteId = () => {\n    const newBaseRoute = createRoute();\n    Request.get(\"/appConfig\").then(res => {\n        if (res.data.response_code === 0) {\n            let apiConfigs = res.data.response_object.api_service_config;\n            let newApiConfigs = apiConfigs.map(config => {\n                if (config.api_service_id === apiServiceId) {\n                    config.service_config.routes = config.service_config.routes.map(item => {\n                        if (item.route_id === routeId) {\n                            return newBaseRoute;\n                        }\n                        return item;\n                    });\n                }\n                return config;\n            });\n\n\n            Request.post(\"/appConfig\", newApiConfigs).then(res => {\n                message.info(\"Save listener successfully!\");\n            });\n\n        }\n    });\n}\nconst collectAllowDenyData = () => {\n    if (!allowDenyData.allowDenyList) {\n        return null;\n    }\n    return allowDenyData.allowDenyList.map((item) => ({\n        limit_type: item.type,\n        value: item.value\n    }));\n};\nconst collectAuthenticationData = () => {\n    if (!authenticationData.authenticationType||authenticationData.authenticationType === \"None\") {\n        return null;\n    }\n    const isApiKeyAuth = authenticationData.authenticationType === \"ApiKeyAuth\";\n    const isBasicAuth = authenticationData.authenticationType === \"BasicAuth\";\n    return {\n        type: authenticationData.authenticationType,\n        ...(isApiKeyAuth) && { key: authenticationData.authenticationObj.key },\n        ...(isApiKeyAuth) && { value: authenticationData.authenticationObj.value },\n        ...(isBasicAuth) && { credentials: authenticationData.authenticationObj.credentials },\n\n    };\n};\nconst collectRatelimitData = () => {\n    if (!ratelimitData.ratelimitType||ratelimitData.ratelimitType === \"None\") {\n        return null;\n    }\n\n    const isTokenBucket = ratelimitData.ratelimitType === \"TokenBucketRateLimit\";\n    const isLocationOnIP = ratelimitData.limitLocationType === \"IP\";\n    const data = {\n        type: ratelimitData.ratelimitType,\n        rate_per_unit: ratelimitData.ratePerUnit,\n        unit: {\n            type: ratelimitData.unitType\n        },\n        ...(isTokenBucket) && { capacity: ratelimitData.bucketCapacity },\n        limit_location: {\n            type: ratelimitData.limitLocationType,\n            ...(isLocationOnIP) && { value: ratelimitData.ip },\n            ...(!isLocationOnIP) && { key: ratelimitData.headerKey },\n            ...(!isLocationOnIP) && { value: ratelimitData.headerValue },\n\n        }\n    };\n    return data;\n\n};\n\nreturn (\n    <div style={{ paddingTop: \"20px\", background: \"#f5f5f7\", height: \"100%\" }}>\n        <RowDiv>\n            <Col xs={{ span: 16, offset: 4 }} style={{ height: \"60vh\" }}>\n                <Card title={apiServiceId === undefined ? \"New Config\" : \"Change Config\"} extra={<Button type=\"primary\" onClick={handleSaveButtonOnClick}>Save</Button>}>\n                    <TabsDiv\n                        // centered={true}\n                        defaultActiveKey=\"1\"\n                        type=\"card\"\n                        size=\"large\"\n                        items={getTabs()}\n                    />\n                </Card>\n            </Col>\n\n        </RowDiv>\n    </div>\n);\n\n}\nexport default withRouter(ConfigPage);","/home/sliu/code/github/silverwind-dashboard/src/component/ratelimit.jsx",[],"/home/sliu/code/github/silverwind-dashboard/src/component/allowDenyList.jsx",[],"/home/sliu/code/github/silverwind-dashboard/src/component/authentication.jsx",[],"/home/sliu/code/github/silverwind-dashboard/src/component/baseConfig.jsx",[],"/home/sliu/code/github/silverwind-dashboard/src/component/listenerListPage.jsx",["92","93","94","95","96"],"import React, { useState, useEffect } from 'react'\nimport { Row, Col, Button, Card,message } from 'antd';\n\nimport Request from '../utils/axiosUtils'\nimport { Table } from 'antd';\n\nimport { withRouter } from 'react-router-dom'\n\nimport styled from 'styled-components'\n\nconst RowDiv = styled(Row)`\nbackground: rgb(245, 245, 247);\n`;\nconst CardDiv = styled(Card)`\n.ant-card-body{\n    padding:0px;\n}\n`;\nfunction ListenerListPage(props) {\n    const [tableData, setTableData] = useState([])\n\n    useEffect(() => {\n\n        requestAppConfig();\n\n    }, []);\n    const requestAppConfig = () => {\n\n        Request.get(\"/appConfig\").then(res => {\n            if (res.data.response_code === 0) {\n                // setAppConfig(res.data.response_object.api_service_config);\n                // const set=new Map();\n                let tableData = res.data.response_object.api_service_config.flatMap((p) => {\n                    // \"port\": p.listen_port,\n                    // \"type\": \"HTTP\",\n                    return p.service_config.routes.map((item) => ({\n                        \"port\": p.listen_port,\n                        \"apiServiceId\":p.api_service_id,\n                        \"type\": p.service_config.server_type,\n                        \"pathPrefix\": item.matcher.prefix,\n                        \"routeId\": item.route_id\n                    }));\n                });\n                setTableData(tableData);\n            }\n        }).catch(error=>{\n            console.error(error);\n            message.error(\"Cause error when request the silverwind admin port,the error is \"+error.message);\n        });\n\n    }\n\n    const handleEditOnClick = (record) => {\n        const { apiServiceId, routeId } = record\n        let { history } = props;\n        history.push('/configPage?apiServiceId=' + apiServiceId + \"&routeId=\" + routeId);\n    }\n    const handleDeleteOnClick = (record) => {\n        const { apiServiceId,routeId } = record\n        let { history } = props;\n        Request.get(\"/appConfig\").then(res => {\n            if (res.data.response_code === 0) {\n                const apiConfigs = res.data.response_object.api_service_config;\n                const newApiConfigs=apiConfigs.map(item=>{\n                    const newRoutes=item.service_config.routes.filter(route=>route.route_id!=routeId);\n                    if(newRoutes.length>0){\n                        item.service_config.routes=newRoutes;\n                        return item;\n                    }else{\n                        return undefined;\n                    }\n                }).filter(item=>item!==undefined);\n\n    \n    \n                Request.post(\"/appConfig\", newApiConfigs).then(res => {\n                    message.info({\n                        content: 'Delete route successfully!',\n                        duration: 3,\n                        onClose: () => {\n                            window.location.reload();\n\n                        }\n                      });\n                });\n    \n            }\n        });\n    }\n    const columns = [\n        {\n            title: 'Port',\n            dataIndex: 'port',\n            key: \"port\",\n            width: '30%',\n            sorter: (a, b) => a.port - b.port,\n            defaultSortOrder: 'descend',\n        },\n        {\n            title: 'Type',\n            dataIndex: 'type',\n            key: \"type\",\n            sorter: (a, b) => a.type.length - b.type.length,\n            defaultSortOrder: 'descend',\n        }, {\n            title: 'Path Prefix',\n            dataIndex: 'pathPrefix',\n            key: \"pathPrefix\",\n            sorter: (a, b) => a.pathPrefix.length - b.pathPrefix.length,\n            defaultSortOrder: 'descend',\n        },\n        {\n            title: 'Operation',\n            dataIndex: 'detail',\n            key: \"detail\",\n            render: (text, record) =>\n                <>\n                    <Row>\n                        <Col span={4}>\n                        <a style={{ \"cursor\": \"pointer\" }} onClick={() => handleEditOnClick(record)}>Edit</a>\n                        </Col>\n                        <Col>\n                        <a style={{ \"cursor\": \"pointer\" }} onClick={() => handleDeleteOnClick(record)}>Delete</a>\n                        </Col>\n                    </Row>\n                </>,\n\n        },\n\n    ];\n    const onChange = (pagination, filters, sorter, extra) => {\n        console.log('params', pagination, filters, sorter, extra);\n    };\n    const handleCreateButtonOnClick = () => {\n        let { history } = props;\n        history.push('/configPage');\n    }\n    return (\n        <div style={{ paddingTop: \"20px\", background: \"#f5f5f7\", height: \"100%\" }}>\n\n            <RowDiv>\n                <Col xs={{ span: 16, offset: 4 }} >\n\n                    <RowDiv >\n\n                        <Col xs={{ span: 24 }} >\n                            <CardDiv title=\"Connection Listener\" bordered={false} extra={<Button type=\"primary\" onClick={handleCreateButtonOnClick}>Create New Listener</Button>}>\n                                <Table columns={columns} dataSource={tableData} onChange={onChange} rowKey=\"routeId\" />\n                            </CardDiv>\n                        </Col>\n\n                    </RowDiv>\n\n                </Col>\n\n\n            </RowDiv>\n            {/* </Spin> */}\n        </div>\n    );\n\n}\nexport default withRouter(ListenerListPage);","/home/sliu/code/github/silverwind-dashboard/src/component/startupPage.jsx",["97","98","99","100","101","102"],"import React, { useState, useEffect } from 'react'\nimport { Button, Checkbox, Form, Input, Col, Row } from 'antd';\n\nimport { withRouter } from 'react-router-dom'\n\nimport styled from 'styled-components'\n\nimport ReactECharts from 'echarts-for-react';\n\nconst LineDiv = styled.div`\nposition: fixed; /* or absolute */\n  top: 50%;\n  left: 50%;\n  /* bring your own prefixes */\n  transform: translate(-50%, -50%);\n`;\nconst TitleDiv=styled.h2`\nmargin-bottom:60px;\nfont-weight:bold;\ncolor:white;\n\n`\nconst FormDiv=styled(Form)`\n.ant-form-item-required{\n    color:white;\n    font-weight:bold;\n\n}\n`\nconst ButtonDiv=styled(Button)`\ncolor: rgb(169, 71, 15);\nbackground-color: rgb(255, 244, 220);\nbackground: rgb(255, 244, 220);\nborder: 2px solid white;\n\n.ant-btn:hover, .ant-btn:focus{\ncolor: rgb(169, 71, 15);\nborder-color: #40a9ff;\nbackground: rgb(255, 244, 220);\n}\n`\nfunction StartupPage(props) {\n\n    const [host, setHost] = useState(\"127.0.0.1\")\n    const [port, setPort] = useState(\"6980\")\n    const handleHostOnChange = (e) => {\n        setHost(e.target.value);\n    }\n    const handlePortOnChange = (e) => {\n        setPort(e.target.value);\n    }\n    const handleButtonOnClick=(values)=>{ \n        const{host,port}=values;\n    localStorage.setItem(\"port\",JSON.stringify(port));\n    localStorage.setItem(\"host\",JSON.stringify(host));\n    window.location.reload();\n\n    }\n    return (\n        <div style={{ background: \"rgb(8, 109, 215)\", height: '100%' }}>\n            <LineDiv>\n                <TitleDiv>Start new Silverwind Dashboard</TitleDiv>\n                <FormDiv\n                onFinish={handleButtonOnClick}\n                    name=\"basic\"\n                    layout=\"vertical\"\n                    initialValues={{\n                        host:host,\n                        port:port\n                    }}\n                    autoComplete=\"off\"\n                   \n                >\n                    <Form.Item\n                        label=\"Silverwind Admin Host\"\n                        name=\"host\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input silverwind host!',\n                            },\n                        ]}\n                    >\n                        <Input onChange={handleHostOnChange}/>\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Silverwind Admin Port\"\n                        name=\"port\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input silverwind port!',\n                            },\n                        ]}\n                    >\n                        <Input onChange={handlePortOnChange}/>\n                    </Form.Item>\n\n   \n\n                    <Form.Item\n                        wrapperCol={{\n                            offset: 8,\n                            span: 16,\n                        }}\n                    >\n                        <ButtonDiv  htmlType=\"submit\">\n                            Start Dashboard\n                        </ButtonDiv>\n                    </Form.Item>\n                </FormDiv>\n            </LineDiv>\n            {/* </Spin> */}\n        </div>\n    );\n\n}\nexport default StartupPage;",{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":1,"column":29,"nodeType":"109","messageId":"110","endLine":1,"endColumn":38},{"ruleId":"107","severity":1,"message":"111","line":6,"column":8,"nodeType":"109","messageId":"110","endLine":6,"endColumn":15},{"ruleId":"107","severity":1,"message":"112","line":36,"column":20,"nodeType":"109","messageId":"110","endLine":36,"endColumn":31},{"ruleId":"107","severity":1,"message":"113","line":37,"column":16,"nodeType":"109","messageId":"110","endLine":37,"endColumn":23},{"ruleId":"114","severity":1,"message":"115","line":13,"column":40,"nodeType":"116","messageId":"117","endLine":13,"endColumn":41},{"ruleId":"114","severity":1,"message":"115","line":13,"column":46,"nodeType":"116","messageId":"117","endLine":13,"endColumn":47},{"ruleId":"107","severity":1,"message":"118","line":2,"column":8,"nodeType":"109","messageId":"110","endLine":2,"endColumn":14},{"ruleId":"107","severity":1,"message":"119","line":39,"column":20,"nodeType":"109","messageId":"110","endLine":39,"endColumn":27},{"ruleId":"107","severity":1,"message":"120","line":1,"column":16,"nodeType":"109","messageId":"110","endLine":1,"endColumn":24},{"ruleId":"107","severity":1,"message":"108","line":1,"column":26,"nodeType":"109","messageId":"110","endLine":1,"endColumn":35},{"ruleId":"107","severity":1,"message":"121","line":2,"column":19,"nodeType":"109","messageId":"110","endLine":2,"endColumn":24},{"ruleId":"107","severity":1,"message":"122","line":2,"column":25,"nodeType":"109","messageId":"110","endLine":2,"endColumn":31},{"ruleId":"107","severity":1,"message":"113","line":45,"column":18,"nodeType":"109","messageId":"110","endLine":45,"endColumn":25},{"ruleId":"107","severity":1,"message":"123","line":47,"column":18,"nodeType":"109","messageId":"110","endLine":47,"endColumn":25},{"ruleId":"124","severity":1,"message":"125","line":71,"column":8,"nodeType":"126","endLine":71,"endColumn":10,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":202,"column":46,"nodeType":"130","endLine":202,"endColumn":136},{"ruleId":"128","severity":1,"message":"129","line":211,"column":24,"nodeType":"130","endLine":211,"endColumn":115},{"ruleId":"107","severity":1,"message":"131","line":29,"column":12,"nodeType":"109","messageId":"110","endLine":29,"endColumn":21},{"ruleId":"124","severity":1,"message":"132","line":51,"column":8,"nodeType":"126","endLine":51,"endColumn":10,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":292,"column":60,"nodeType":"136","messageId":"137","endLine":292,"endColumn":62},{"ruleId":"107","severity":1,"message":"138","line":59,"column":17,"nodeType":"109","messageId":"110","endLine":59,"endColumn":29},{"ruleId":"107","severity":1,"message":"139","line":60,"column":15,"nodeType":"109","messageId":"110","endLine":60,"endColumn":22},{"ruleId":"140","severity":1,"message":"141","line":65,"column":92,"nodeType":"116","messageId":"142","endLine":65,"endColumn":94},{"ruleId":"128","severity":1,"message":"129","line":120,"column":25,"nodeType":"130","endLine":120,"endColumn":102},{"ruleId":"128","severity":1,"message":"129","line":123,"column":25,"nodeType":"130","endLine":123,"endColumn":104},{"ruleId":"107","severity":1,"message":"108","line":1,"column":27,"nodeType":"109","messageId":"110","endLine":1,"endColumn":36},{"ruleId":"107","severity":1,"message":"143","line":2,"column":18,"nodeType":"109","messageId":"110","endLine":2,"endColumn":26},{"ruleId":"107","severity":1,"message":"144","line":2,"column":41,"nodeType":"109","messageId":"110","endLine":2,"endColumn":44},{"ruleId":"107","severity":1,"message":"145","line":2,"column":46,"nodeType":"109","messageId":"110","endLine":2,"endColumn":49},{"ruleId":"107","severity":1,"message":"146","line":4,"column":10,"nodeType":"109","messageId":"110","endLine":4,"endColumn":20},{"ruleId":"107","severity":1,"message":"147","line":8,"column":8,"nodeType":"109","messageId":"110","endLine":8,"endColumn":20},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Request' is defined but never used.","'setHasLogin' is assigned a value but never used.","'setHost' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&' and '|'. Use parentheses to clarify the intended order of operations.","BinaryExpression","unexpectedMixedOperator","'lodash' is defined but never used.","'message' is assigned a value but never used.","'useState' is defined but never used.","'Input' is defined but never used.","'Button' is defined but never used.","'setPort' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchParam'. Either include it or remove the dependency array.","ArrayExpression",["150"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'appConfig' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'requestAppConfig' and 'searchParam'. Either include them or remove the dependency array.",["151"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'apiServiceId' is assigned a value but never used.","'history' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","'Checkbox' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'withRouter' is defined but never used.","'ReactECharts' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},"Update the dependencies array to be: [searchParam]",{"range":"156","text":"157"},"Update the dependencies array to be: [requestAppConfig, searchParam]",{"range":"158","text":"159"},[2105,2107],"[searchParam]",[1654,1656],"[requestAppConfig, searchParam]"]